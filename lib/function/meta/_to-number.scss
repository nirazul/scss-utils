@use 'sass:list';
@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:string';
@use '../math/to-length' as *;

$numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

/// Casts a string into a number
/// @param {string|number} $value - Value to be parsed
/// @return {number}
///
@function to-number($value) {
  @if meta.type-of($value) == 'number' {
    @return $value;
  } @else if meta.type-of($value) != 'string' {
    @error 'Value "#{$value}" should be a number or a string.';
  }

  $first-character: string.slice($value, 1, 1);
  $result: 0;
  $digits: 0;
  $is-minus: ($first-character == '-');

  // Remove +/- sign if present at first character
  @if ($first-character == '+' or $first-character == '-') {
    $value: string.slice($value, 2);
  }

  @for $i from 1 through (string.length($value)) {
    $character: string.slice($value, $i, $i);

    @if not (list.index(map.keys($numbers), $character) or $character == '.') {
      @return to-length(if($is-minus, -$result, $result), string.slice($value, $i));
    }

    @if $character == '.' {
      $digits: 1;
    } @else if $digits == 0 {
      $result: $result * 10 + map.get($numbers, $character);
    } @else {
      $digits: $digits * 10;
      $result: $result + math.div(map.get($numbers, $character), $digits);
    }
  }

  @return if($is-minus, -$result, $result);
}
